package edu.dartmouthcs.mltoolkit.ServiceControllers.AudioLib;

//import android.os.PowerManager;
import java.io.FileOutputStream; //import java.io.IOException;  
import java.io.OutputStreamWriter; //import android.text.format.Time;

import android.app.Service; //import android.app.Activity;
//import android.content.Context;
//import android.os.Bundle;
//import android.widget.TextView;
import android.widget.RemoteViews;
import android.widget.Toast;
import android.media.AudioFormat;
import android.os.Binder;
import android.os.IBinder;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.Color;
//import android.hardware.Sensor;
//import android.hardware.SensorEvent;
//import android.hardware.SensorEventListener;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.telephony.TelephonyManager;
import android.util.Log;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

//import com.example.android.apis.app.AccelerometerManager;

// Need the following import to get access to the app resources, since this
// class is in a sub-package.
import edu.dartmouthcs.mltoolkit.Ml_Toolkit_Application;
import edu.dartmouthcs.mltoolkit.R;
import edu.dartmouthcs.mltoolkit.ServiceControllers.AccelerometerLib.AccelerometerManager;
import edu.dartmouthcs.mltoolkit.ServiceControllers.AccelerometerLib.AccelerometerService;
import edu.dartmouthcs.mltoolkit.ServiceControllers.AccelerometerLib.AccelerometerService.AccelerometerBinder;
import edu.dartmouthcs.mltoolkit.ServiceControllers.UploadingLib.InfoObject;
import edu.dartmouthcs.mltoolkit.Storage.MySDCardStateListener;

public class AudioService extends Service{
	private static Context CONTEXT;

	private static final Class[] mStartForegroundSignature = new Class[] {
		int.class, Notification.class };
	private static final Class[] mStopForegroundSignature = new Class[] { boolean.class };

	public static final String ACTION_FOREGROUND = "edu.dartmouthcs.mltoolkit.ServiceControllers.AudioLib.FOREGROUND";
	public static final String ACTION_BACKGROUND = "edu.dartmouthcs.mltoolkit.ServiceControllers.AudioLib.BACKGROUND";

	private static NotificationManager mNM;
	private Method mStartForeground;
	private Method mStopForeground;

	private Object[] mStartForegroundArgs = new Object[2];
	private Object[] mStopForegroundArgs = new Object[1];

	private FileOutputStream fOut;
	//private OutputStreamWriter osw;
	public static boolean Foreground_on;

	//public long no_of_records;
	//public int curr_no_of_records;
	public static boolean Activity_on;
	private static Notification notification;
	private RehearsalAudioRecorder ar;
	private Ml_Toolkit_Application appState;

	//binder
	private final IBinder binder = new AudioBinder(); 

	//audio status
	public String inferred_audio_Status = "Not Available";
	public String prev_inferred_audio_Status = "Not Available";
	private Thread t; 

	private RemoteViews contentView;


	private boolean abnormalRestart = false;

	/** Called when the activity is first created. */
	@Override
	public void onCreate() {

		// Register our receiver for the ACTION_SCREEN_OFF action. This will make our receiver
		// code be called whenever the phone enters standby mode.
		//IntentFilter filter = new IntentFilter(Intent.ACTION_SCREEN_OFF);
		//registerReceiver(AccelerometerManager.mReceiver, filter);

		// screen will stay on during this section
		appState = (Ml_Toolkit_Application) getApplicationContext();
		appState.audioService = this;

		//no_of_records = 0;
		appState.audio_no_of_records = 0;
		//curr_no_of_records = 0;
		CONTEXT = this;

		mNM = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
		try {
			mStartForeground = getClass().getMethod("startForeground",
					mStartForegroundSignature);
			mStopForeground = getClass().getMethod("stopForeground",
					mStopForegroundSignature);
		} catch (NoSuchMethodException e) {
			// Running on an older platform.
			mStartForeground = mStopForeground = null;
		}

		/*
		try {
			fOut = new FileOutputStream("/sdcard/accel.txt");// openFileOutput("accel.txt",MODE_WORLD_READABLE);
			osw = new OutputStreamWriter(fOut);
		} catch (Exception e) {
			// Toast.makeText(this, "Failed to create file" +
			// e.toString(),Toast.LENGTH_SHORT).show();
		}
		Toast.makeText(this,
				"Service Started ",
				Toast.LENGTH_SHORT).show();


		if (AccelerometerManager.isSupported()) {
			AccelerometerManager.startListening(this);
		}
		 */


		Toast.makeText(this,
				"Audio Service Started ",
				Toast.LENGTH_SHORT).show();


		//if it is a start because of a process kill
		//intiateIfItIsAnIrregularStuff();

		//starting the recording
		ar = new RehearsalAudioRecorder(appState, this, true, android.media.MediaRecorder.AudioSource.MIC, 8000, AudioFormat.CHANNEL_CONFIGURATION_MONO,
				AudioFormat.ENCODING_PCM_16BIT);


		try{
			//ar.setOutputFile("/sdcard/audio2.txt");
			//ar.prepare();
			//ar.start();

			t = new Thread() {
				public void run(){
					//AccelerometerManager.startListening(accelServ);
					ar.setOutputFile("/sdcard/audio3.txt");
					ar.prepare();
					ar.start();
				}
			};
			//t.setPriority(Thread.NORM_PRIORITY+1);
			t.start();
		}
		catch(Exception ex)
		{
			ar = null;
			Toast.makeText(this, "Cannot create audio file \n" + ex.toString() , Toast.LENGTH_SHORT).show();
		}
		Toast.makeText(this, "Recording started", Toast.LENGTH_SHORT).show();



		Activity_on = true;
		Foreground_on = true;

		contentView = new RemoteViews(getPackageName(), R.layout.notification_layout);
	}

	private void intiateIfItIsAnIrregularStuff() {
		// TODO Auto-generated method stub
		if(appState.applicatin_starated == false){

			appState.applicatin_starated = true;


			//getting the IMEI
			TelephonyManager mTelephonyMgr = (TelephonyManager)getSystemService(TELEPHONY_SERVICE);
			appState.IMEI = mTelephonyMgr.getDeviceId();
			appState.initializeDataBase();
			appState.db_adapter.open();

			appState.infoObj = new InfoObject(this, appState);
			appState.phoneCallInfo = new MyPhoneStateListener(this,appState);
			//appState.phoneCallInfo = new MyPhoneStateListener(this,appState);
			appState.mySDCardStateInfo = new MySDCardStateListener(this, appState);

			//application started .... service started
		}	
	}

	public static Context getContext() {
		return CONTEXT;
	}

	// This is the old onStart method that will be called on the pre-2.0
	// platform. On 2.0 or later we override onStartCommand() so this
	// method will not be called.
	@Override
	public void onStart(Intent intent, int startId) {
		handleCommand(intent);
	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {

		/*if(intent == null)//due to bad close
		{
			appState.audioSensorOn = true;
			appState.rawAudioOn = false;
			appState.audioForceLocked = false;
			//notification = new Notification(R.drawable.logo,"ML Toolkit",System.currentTimeMillis());//(R.drawable.icon, text, System.currentTimeMillis());
			notification = new Notification(R.drawable.logo,"ML Toolkit",System.currentTimeMillis());//(R.drawable.icon, text, System.currentTimeMillis());
			//contentView.setImageViewResource(R.id.status_icon, R.drawable.icon);
			contentView.setTextViewText(R.id.accel_text, "Accel On:" + " (" + appState.accel_no_of_records + ")");
			contentView.setTextColor(R.id.accel_text, Color.argb(128, 0, 115, 0));
			contentView.setTextViewText(R.id.audio_text, "Audio on:" + " (" + appState.audio_no_of_records + ")");
			contentView.setTextColor(R.id.audio_text, Color.argb(128, 0, 115, 0));
			contentView.setTextViewText(R.id.location_text, "Location on:" + " (" + appState.location_text + ")");
			contentView.setTextColor(R.id.location_text, Color.argb(128, 0, 115, 0));
			notification.contentView = contentView;
			PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
					new Intent(this, edu.dartmouthcs.mltoolkit.main_activity.class), 0);
			notification.contentIntent = contentIntent;

			startForegroundCompat(R.string.CUSTOM_VIEW,notification);
			return START_STICKY;
		}*/

		if(intent == null)
		{
			abnormalRestart = true;
			stopSelf();
			appState.mlt.destroy();
			//return 
			return START_NOT_STICKY;
		}

		handleCommand(intent);


		// We want this service to continue running until it is explicitly
		// stopped, so return sticky.
		return START_STICKY;
		//return START_NOT_STICKY;
		//return START_REDELIVER_INTENT;
	}

	void handleCommand(Intent intent) {
		if (ACTION_FOREGROUND.equals(intent.getAction())) {
			// In this sample, we'll use the same text for the ticker and the
			// expanded notification
			//String text = "Audio On:";// getText(R.string.foreground_service_started);

			/*
			// Set the icon, scrolling text and timestamp
			notification = new Notification(R.drawable.icon, text, System
					.currentTimeMillis());

			// The PendingIntent to launch our activity if the user selects this
			// notification
			PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
					new Intent(this,edu.dartmouthcs.mltoolkit.main_activity.class), 0);

			// Set the info for the views that show in the notification panel.
			notification.setLatestEventInfo(this, "Audio Test ", text
					+ " " + appState.audio_no_of_records, contentIntent);

			startForegroundCompat(R.string.foreground_service_started_aud,
					notification);
			//startForegroundCompat(2 , notification);
			 * 
			 */

			//notification = new Notification(R.drawable.logo,"ML Toolkit",System.currentTimeMillis());//(R.drawable.icon, text, System.currentTimeMillis());
			notification = new Notification(R.drawable.logo,"ML Toolkit",System.currentTimeMillis());//(R.drawable.icon, text, System.currentTimeMillis());
			//contentView.setImageViewResource(R.id.status_icon, R.drawable.icon);
			contentView.setTextViewText(R.id.accel_text, "Accel On:" + " (" + appState.accel_no_of_records + ")");
			contentView.setTextColor(R.id.accel_text, Color.argb(128, 0, 115, 0));
			contentView.setTextViewText(R.id.audio_text, "Audio on:" + " (" + appState.audio_no_of_records + ")");
			contentView.setTextColor(R.id.audio_text, Color.argb(128, 0, 115, 0));
			contentView.setTextViewText(R.id.location_text, "Location on:" + " (" + appState.location_text + ")");
			contentView.setTextColor(R.id.location_text, Color.argb(128, 0, 115, 0));
			notification.contentView = contentView;
			PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
					new Intent(this, edu.dartmouthcs.mltoolkit.main_activity.class), 0);
			notification.contentIntent = contentIntent;

			startForegroundCompat(R.string.CUSTOM_VIEW,notification);

		} else if (ACTION_BACKGROUND.equals(intent.getAction())) {
			stopForegroundCompat(R.string.foreground_service_started_aud);
			//stopForegroundCompat(2);

		}
	}

	public void callStartForegroundCompat(){
		startForegroundCompat(R.string.CUSTOM_VIEW,notification);
		updateNotificationArea();
	}

	/**
	 * This is a wrapper around the new startForeground method, using the older
	 * APIs if it is not available.
	 */
	public void startForegroundCompat(int id, Notification notification) {
		// If we have the new startForeground API, then use it.
		Foreground_on = true;
		if (mStartForeground != null) {
			mStartForegroundArgs[0] = Integer.valueOf(id);
			mStartForegroundArgs[1] = notification;
			try {
				mStartForeground.invoke(this, mStartForegroundArgs);
			} catch (InvocationTargetException e) {
				// Should not happen.
				Log.w("ApiDemos", "Unable to invoke startForeground", e);
			} catch (IllegalAccessException e) {
				// Should not happen.
				Log.w("ApiDemos", "Unable to invoke startForeground", e);
			}
			return;
		}

		// Fall back on the old API.
		setForeground(true);
		mNM.notify(id, notification);
	}

	/**
	 * This is a wrapper around the new stopForeground method, using the older
	 * APIs if it is not available.
	 */
	public void stopForegroundCompat(int id) {
		Foreground_on = false;
		// If we have the new stopForeground API, then use it.
		if (mStopForeground != null) {
			mStopForegroundArgs[0] = Boolean.TRUE;
			try {
				mStopForeground.invoke(this, mStopForegroundArgs);
			} catch (InvocationTargetException e) {
				// Should not happen.
				Log.w("ApiDemos", "Unable to invoke stopForeground", e);
			} catch (IllegalAccessException e) {
				// Should not happen.
				Log.w("ApiDemos", "Unable to invoke stopForeground", e);
			}
			return;
		}

		// Fall back on the old API. Note to cancel BEFORE changing the
		// foreground state, since we could be killed at that point.
		mNM.cancel(id);
		setForeground(false);
	}

	@Override
	public void onDestroy() {
		// Make sure our notification is gone.
		stopForegroundCompat(R.string.CUSTOM_VIEW);
		//stopForegroundCompat(2);

		try{
			if(ar == null)
			{
				Toast.makeText(this, "No audio file selected", Toast.LENGTH_SHORT).show();
				return;
			}

			//ar.stop();
			ar.release();

			Toast.makeText(this, "REcording stopped", Toast.LENGTH_SHORT).show();
		}
		catch(Exception ex)
		{
			Toast.makeText(this, "Failed to stop recording \n" + ex.toString() , Toast.LENGTH_SHORT).show();
		}
		ar = null;
		appState.audioService =null;

	}


	@Override
	public IBinder onBind(Intent intent) {
		return binder;
	}

	public class AudioBinder extends Binder{
		public AudioService getService(){
			return AudioService.this;
		}
	}


	public void updateNotificationArea(){
		//if (no_of_records % 100 == 0 && Foreground_on == true) {

		//String text = "No of samples";

		// Set the info for the views that show in the notification panel.
		/*PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
					new Intent(this, edu.dartmouthcs.mltoolkit.main_activity.class), 0);


			//notification.setLatestEventInfo(this, "Audio Test ", text, contentIntent);


			// Set the info for the views that show in the notification panel.
			notification.setLatestEventInfo(this, "Audio Test ", text
					+ " " + appState.audio_no_of_records, contentIntent);

			mNM.notify(R.string.foreground_service_started_aud, notification);*/
		//mNM.notify(2, notification);
		//*/

		//String text = "Audio On:";
		// Set the info for the views that show in the notification panel.
		//PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
		//	new Intent(this, edu.dartmouthcs.mltoolkit.main_activity.class), 0);

		// Set the info for the views that show in the notification panel.
		//notification.setLatestEventInfo(this, "Accelerometer Test", text
		//		+ " " + curr_no_of_records, contentIntent);
		//mNM.notify(R.string.foreground_service_started, notification);
		//mNM.notify(1, notification);

		//notification = new Notification(R.drawable.logo,"ML Toolkit",System.currentTimeMillis());//(R.drawable.icon, text, System.currentTimeMillis());
		//contentView.setImageViewResource(R.id.status_icon, R.drawable.logo);

		if(appState.accelSensorOn){
			contentView.setTextViewText(R.id.accel_text, "Accel On:" + " (" + appState.accel_no_of_records + ")");
			contentView.setTextColor(R.id.accel_text, Color.argb(128, 0, 115, 0));
		}
		else
		{
			contentView.setTextViewText(R.id.accel_text, "Accel Off");
			contentView.setTextColor(R.id.accel_text, Color.argb(128, 115, 0, 0));
		}

		contentView.setTextViewText(R.id.audio_text, "Audio On:" + " (" + appState.audio_no_of_records + ")");					
		contentView.setTextColor(R.id.audio_text, Color.argb(128, 0, 115, 0));

		if(appState.locationSensorOn){
			contentView.setTextViewText(R.id.location_text, "Location On:" + " (" + appState.location_text + ")");					
			contentView.setTextColor(R.id.location_text, Color.argb(128, 0, 115, 0));
		}
		else
		{
			contentView.setTextViewText(R.id.location_text, "Location off");					
			contentView.setTextColor(R.id.location_text, Color.argb(128, 115, 0, 0));
		}

		notification.contentView = contentView;
		PendingIntent contentIntent = PendingIntent.getActivity(this, 0,
				new Intent(this, edu.dartmouthcs.mltoolkit.main_activity.class), 0);
		notification.contentIntent = contentIntent;

		//startForegroundCompat(R.string.CUSTOM_VIEW,notification);
		mNM.notify(R.string.CUSTOM_VIEW,notification);

		//}
	}


}
